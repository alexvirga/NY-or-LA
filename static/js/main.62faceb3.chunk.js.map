{"version":3,"sources":["Components/QuestionList.js","Components/Question.js","Components/ProgressBar.js","Components/QuizResults.js","Components/Footer.js","Components/Home.js","App.js","serviceWorker.js","index.js"],"names":["questionList","question","points","answers","answer","city","Question","state","currentQuestion","className","this","props","onClick","handleAnswer","Component","ProgressBar","renderDots","dotArr","i","questionCount","push","id","QuizResults","calculateResult","scores","finalScore","Object","keys","reduce","a","b","Footer","Home","started","score","NY","LA","setState","QuestionList","length","key","style","margin","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62faceb3.chunk.js","sourcesContent":["const questionList = [\n    {\n      question: \"In which year did you escape?\",\n      points: 1,\n      answers: [\n        { answer: \"1997\", city: \"NY\" },\n        { answer: \"2013\", city: \"LA\" },\n      ], \n    },\n    {\n      question: \"What caused the root of all of the chaos?\",\n      points: 1,\n      answers: [\n        { answer: \"World War 3\", city: \"NY\" },\n        { answer: \"An earthquake\", city: \"LA\" },\n      ],\n    },\n    {\n      question: \"The president tries to stop an invasion from where?\",\n      points: 1,\n      answers: [\n        { answer: \"Cuba\", city: \"LA\" },\n        { answer: \"Soviet Union\", city: \"NY\" },\n      ],\n    },\n    {\n      question: \"Where was an island converted into a prison?\",\n      points: 1,\n      answers: [\n        { answer: \"Manhattan\", city: \"NY\" },\n        { answer: \"LA\", city: \"LA\" },\n      ],\n    },\n    {\n      question:\n        \"Warning.. SPOILER ALERT: At the end of the movie, the main character Snake, does what?\",\n      points: 1,\n      answers: [\n        {\n          answer: \"Picks a cigarette box labelled “American Spirit”\",\n          city: \"LA\",\n        },\n        {\n          answer: \"Puffs a cigarette while going into the darkness\",\n          city: \"NY\",\n        },\n      ],\n    },\n  ];\n\n  export default questionList\n","import React, { Component } from \"react\";\nimport QuestionList from './QuestionList'\n\nclass Question extends Component {\n  state = {\n      currentQuestion: 0\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"slide\" >\n        <h1 className=\"question-title\"> {this.props.currentQuestion.question} </h1>\n        <div className={\"response-container\"}>\n            <div className={\"response response-left\"} onClick={() => this.props.handleAnswer(this.props.currentQuestion.answers[0].city) }>\n            {this.props.currentQuestion.answers[0].answer}\n            </div>\n            <div className={\"response response-right\"} onClick={() => this.props.handleAnswer(this.props.currentQuestion.answers[1].city) }>\n            {this.props.currentQuestion.answers[1].answer}\n            </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default Question;\n","import React, { Component } from \"react\";\n\nclass ProgressBar extends Component {\n  renderDots = () => {\n    const dotArr = [];\n    for (let i = 0; i < this.props.questionCount - 1; i++) {\n      if (this.props.currentQuestion >= i) {\n        dotArr.push(\n          <div id={`step${i}`} className=\"progress-step dot-incomplete\" />\n        );\n      } else\n        dotArr.push(\n          <div id={`step${i}`} className=\"progress-step dot-complete\" />\n        );\n    }\n    return dotArr;\n  };\n\n  render() {\n    return <div className=\"progress\">{this.renderDots()}</div>;\n  }\n}\n\nexport default ProgressBar;\n","import React, { Component } from \"react\";\n\nclass QuizResults extends Component {\n  calculateResult = () => {\n    const scores = this.props.finalScore;\n    const result = Object.keys(scores).reduce((a, b) =>\n      scores[a] > scores[b] ? a : b\n    );\n    return result;\n  };\n  render() {\n    return (\n      <h1 className={\"result-text\"}>\n        Congrats, you are a survivor! You just escaped from{\" \"}\n        {this.calculateResult()}!\n      </h1>\n    );\n  }\n}\n\nexport default QuizResults;\n","import React, { Component } from \"react\";\n\nclass Footer extends Component {\n  render() {\n    return (\n      <div className={\"footer\"}>\n        <p> &copy; 2020 Alex Virga</p>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Question from \"./Question\";\nimport QuestionList from \"./QuestionList\";\nimport ProgressBar from \"./ProgressBar\";\nimport QuizResults from \"./QuizResults\";\nimport Footer from \"./Footer\";\n\nclass Home extends Component {\n  state = {\n    started: false,\n    currentQuestion: 0,\n    score: {\n      NY: 0,\n      LA: 0,\n    },\n  };\n\n  handleAnswer = (city) => {\n    this.setState({\n      currentQuestion: (this.state.currentQuestion += 1),\n      ...this.state.score,\n      city: this.state.score[city]++,\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.started ? (\n          this.state.currentQuestion < QuestionList.length ? (\n            <div className=\"quiz-container\">\n              <Question\n                key={this.state.currentQuestion}\n                handleAnswer={this.handleAnswer}\n                currentQuestion={QuestionList[this.state.currentQuestion]}\n              />\n              <ProgressBar\n                questionCount={QuestionList.length + 1}\n                currentQuestion={this.state.currentQuestion}\n              />\n            </div>\n          ) : (\n            <QuizResults finalScore={this.state.score} />\n          )\n        ) : (\n          <div className=\"quiz-landing\">\n            <h1 style={{margin: \"20px\"}}> Did You Escape From NY or LA </h1>\n            <button\n              className={\"start-button\"}\n              onClick={() => this.setState({ started: true })}\n            >\n              <h2>Start Quiz</h2>\n            </button>\n          </div>\n        )}\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Home from '../src/Components/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n < Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}